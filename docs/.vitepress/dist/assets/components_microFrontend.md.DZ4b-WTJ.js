import{_ as s,c as a,o as e,ae as l}from"./chunks/framework.CIso6Qi3.js";const c=JSON.parse('{"title":"微前端面试问题与答案","description":"","frontmatter":{},"headers":[],"relativePath":"components/microFrontend.md","filePath":"components/microFrontend.md"}'),t={name:"components/microFrontend.md"};function n(h,i,o,p,d,r){return e(),a("div",null,[...i[0]||(i[0]=[l(`<h1 id="微前端面试问题与答案" tabindex="-1">微前端面试问题与答案 <a class="header-anchor" href="#微前端面试问题与答案" aria-label="Permalink to &quot;微前端面试问题与答案&quot;">​</a></h1><h2 id="❓什么是微前端-为什么需要微前端架构" tabindex="-1">❓什么是微前端？为什么需要微前端架构？ <a class="header-anchor" href="#❓什么是微前端-为什么需要微前端架构" aria-label="Permalink to &quot;❓什么是微前端？为什么需要微前端架构？&quot;">​</a></h2><h3 id="🙋-回答" tabindex="-1">🙋 回答： <a class="header-anchor" href="#🙋-回答" aria-label="Permalink to &quot;🙋 回答：&quot;">​</a></h3><p>微前端是一种<code>前端架构模式</code>，它将一个大的前端应用分成多个小的应用，并把这些小的前端应用集成为一个应用。每个小的前端应用可以独立运行、独立开发、独立部署。 微前端架构的需求源于以下几点：</p><ul><li><code>技术栈无关</code> ：支持不同团队使用不同技术栈独立开发</li><li><code>独立开发部署</code> ：各团队可以独立开发、测试和部署自己的应用，减少协作成本</li><li><code>增量升级</code> ：可以逐步替换旧系统而不需要完全重写</li><li><code>更好的可维护性</code> ：代码库更小，更容易理解和维护</li></ul><h2 id="❓目前主流的微前端解决方案有哪些-它们各有什么特点" tabindex="-1">❓目前主流的微前端解决方案有哪些？它们各有什么特点？ <a class="header-anchor" href="#❓目前主流的微前端解决方案有哪些-它们各有什么特点" aria-label="Permalink to &quot;❓目前主流的微前端解决方案有哪些？它们各有什么特点？&quot;">​</a></h2><h3 id="🙋-回答-1" tabindex="-1">🙋 回答： <a class="header-anchor" href="#🙋-回答-1" aria-label="Permalink to &quot;🙋 回答：&quot;">​</a></h3><ul><li>Wujie（无界） ：基于 Web Components + iframe 的方案，特点是原生隔离、性能好、接入成本低</li><li>qiankun ：基于 single-spa 的方案，使用 JavaScript 沙箱和样式隔离</li><li>micro-app ：基于 Web Components 的方案，使用自定义元素和 Shadow DOM</li><li>single-spa ：最早的微前端框架之一，提供了基础的应用注册和生命周期管理</li><li>Module Federation ：Webpack 5 提供的模块联邦功能，支持应用间共享模块</li></ul><h2 id="❓你们项目中使用的-wujie-微前端框架有什么优势" tabindex="-1">❓你们项目中使用的 Wujie 微前端框架有什么优势？ <a class="header-anchor" href="#❓你们项目中使用的-wujie-微前端框架有什么优势" aria-label="Permalink to &quot;❓你们项目中使用的 Wujie 微前端框架有什么优势？&quot;">​</a></h2><h3 id="🙋-回答-2" tabindex="-1">🙋 回答： <a class="header-anchor" href="#🙋-回答-2" aria-label="Permalink to &quot;🙋 回答：&quot;">​</a></h3><ul><li><code>成本低</code> ：主应用和子应用的适配成本都很低，改造工作量小</li><li><code>速度快</code> ：子应用首屏打开速度快，运行性能好</li><li><code>原生隔离</code> ：CSS 通过 Web Components (Shadow DOM) 实现原生隔离，JS 通过 iframe 实现原生隔离</li><li><code>功能强大</code> ：支持子应用保活、嵌套、多应用激活、应用共享、去中心化通信等高级特性</li><li><code>框架兼容性好</code> ：支持各种主流框架，包括 Vue、React 等</li></ul><h2 id="❓微前端架构中-主应用和子应用之间如何通信" tabindex="-1">❓微前端架构中，主应用和子应用之间如何通信？ <a class="header-anchor" href="#❓微前端架构中-主应用和子应用之间如何通信" aria-label="Permalink to &quot;❓微前端架构中，主应用和子应用之间如何通信？&quot;">​</a></h2><h3 id="🙋-回答-3" tabindex="-1">🙋 回答： <a class="header-anchor" href="#🙋-回答-3" aria-label="Permalink to &quot;🙋 回答：&quot;">​</a></h3><ol><li><code>Props 传递</code> ：主应用可以通过 props 向子应用传递数据和方法</li></ol><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 主应用传递 props</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">WujieVue</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;子应用名&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> url</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;子应用地址&quot;</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;"> :props=&quot;props&quot;&gt;&lt;/WujieVue&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 子应用接收</span></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">window.$wujie?.props</span></span></code></pre></div><ol start="2"><li><code>事件通信（EventBus）</code> ：Wujie 提供了跨应用的事件总线</li></ol><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 主应用发送事件</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { bus } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;wujie&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">bus.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$emit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;事件名称&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, 数据);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 子应用监听事件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">window.$wujie.bus.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;事件名称&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">数据</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 处理数据 */</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> });</span></span></code></pre></div><ol start="3"><li><code>全局共享</code> ：通过 window.$wujie 对象共享数据</li></ol><h2 id="❓wujie-是如何实现-css-和-javascript-的隔离的" tabindex="-1">❓Wujie 是如何实现 CSS 和 JavaScript 的隔离的？ <a class="header-anchor" href="#❓wujie-是如何实现-css-和-javascript-的隔离的" aria-label="Permalink to &quot;❓Wujie 是如何实现 CSS 和 JavaScript 的隔离的？&quot;">​</a></h2><h3 id="🙋-回答-4" tabindex="-1">🙋 回答： <a class="header-anchor" href="#🙋-回答-4" aria-label="Permalink to &quot;🙋 回答：&quot;">​</a></h3><p>Wujie 采用了双重隔离机制：</p><ul><li><code>CSS 隔离</code> ：使用 Web Components 的 Shadow DOM 特性，为每个子应用创建一个独立的 DOM 树和样式作用域，确保样式不会相互污染</li><li><code>JavaScript 隔离</code> ：使用 iframe 沙箱机制，为每个子应用提供独立的全局执行环境，同时通过 Proxy 代理对象拦截和修改全局对象的访问，防止全局变量污染</li></ul><h2 id="❓微前端架构中如何处理公共依赖" tabindex="-1">❓微前端架构中如何处理公共依赖？ <a class="header-anchor" href="#❓微前端架构中如何处理公共依赖" aria-label="Permalink to &quot;❓微前端架构中如何处理公共依赖？&quot;">​</a></h2><h3 id="🙋-回答-5" tabindex="-1">🙋 回答： <a class="header-anchor" href="#🙋-回答-5" aria-label="Permalink to &quot;🙋 回答：&quot;">​</a></h3><ol><li><code>外部共享</code> ：将常用库（如 React、Vue、lodash 等）配置为外部依赖，由主应用提供</li></ol><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 在子应用的 webpack 配置中</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">externals</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;react&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;React&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;react-dom&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;ReactDOM&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ol start="2"><li><code>运行时注入</code> ：主应用在运行时将公共依赖注入到子应用的全局对象中</li><li><code>单独加载</code> ：每个子应用独立加载自己需要的依赖，虽然会增加重复加载，但避免了版本冲突问题</li><li><code>依赖提升</code> ：使用 Wujie 的插件系统，将特定依赖提升到主应用级别</li></ol>`,27)])])}const u=s(t,[["render",n]]);export{c as __pageData,u as default};
